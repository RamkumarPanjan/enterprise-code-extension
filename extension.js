const vscode = require('vscode');
const axios = require('axios').default;

/**
 * @param {vscode.ExtensionContext} context
 */

vscode.workspace.onDidChangeTextDocument(event => {
    if (event.contentChanges.some(change => change.text === '    ')) {
		codeSuggest();
	}
});

function codeSuggest(){
	var lang=''	
	var editor = vscode.window.activeTextEditor;
	var filename = editor.document.fileName;
	var file_extension = filename.split('.').pop()
	if (!editor) {
		return;
	}
	if (file_extension == 'py') {
		lang='python'
	}
	else if(file_extension == 'sql') {
		lang='sql'
	}
	else {
		lang='unsupported'
		vscode.window.showErrorMessage('Enterprise AI Code Companion is not supported for ' + file_extension);
	}

	if(lang!='unsupported'){
		vscode.window.showInformationMessage('Enterprise AI Code Companion is generating the optimized code for you');
		const selection = editor.selection;
		var text = editor.document.getText(selection);
		if (text!='') {
			var url='https://anzpathfinders.pythonanywhere.com?lang=' + lang + '&hint= ' + text
			axios.get(url).then(resp => {
				let response_data=resp.data
				response_data = response_data.replace('# Code generated by ANZ Enterprise AI Code Companion', '')
				editor.edit(editBuilder => {
					editBuilder.delete(selection)
				});
				codeComplete(editor, response_data)
				setTimeout(() => {
					codeCleaning();
				}, 1000);
			});
		}
		else{
			vscode.window.showWarningMessage('Please select the input to generate the code completion')
		}
	}
}

function codeComplete(editor, text) {
    let index = 0;
	let words = text.split(' ');
    const intervalId = setInterval(() => {
        editor.edit((editBuilder) => {
			if(index == words.length-1){
				editBuilder.insert(editor.selection.active, words[index] + '');
			}
			else{
            	editBuilder.insert(editor.selection.active, words[index] + ' ');
			}
        });
        index++;
        if (index >= words.length) {
            clearInterval(intervalId);
        }
    }, 50);
	
}

function codeCleaning(){
	let editor = vscode.window.activeTextEditor;

    if (editor) {
      let text = editor.document.getText();

      let lines = text.split('\n');
	//   let updatedLines = []
	//   let i=1
	//   lines.forEach(element => {
	// 	updatedLines[i]=element.trim();
	// 	i++;
	//   });

	  let uniqueLines = Array.from(new Set(lines));

      let updatedText = uniqueLines.join('\n');

      let fullRange = new vscode.Range(new vscode.Position(0, 0), editor.document.positionAt(text.length));
      let edit = new vscode.TextEdit(fullRange, updatedText);
      let workspaceEdit = new vscode.WorkspaceEdit();
      workspaceEdit.set(editor.document.uri, [edit]);

      vscode.workspace.applyEdit(workspaceEdit).then(() => {
        vscode.window.showInformationMessage('Duplicate lines removed.');
      });
	}
}

function activate(context) {
	console.log('Extension "enterprise-code-extension" is running!');
	let disposable1 = vscode.commands.registerCommand('enterprise-code-extension.enterprise-code-companion', function () {
		vscode.window.showInformationMessage('Enterprise AI Code Companion is running...');
	});

	let disposable2 = vscode.commands.registerCommand('enterprise-code-extension.removeDuplicateLines', () => {
		codeCleaning
	  });

	const pythonProvider = vscode.languages.registerHoverProvider({ scheme: 'file', language: 'python' }, {
        provideHover() {
			const linkText = 'Generate Code using Enterprise AI Code Companion';
			const linkUrl = 'command:extension.codeSuggest';
			const markdownString = new vscode.MarkdownString(`[${linkText}](${linkUrl})`);
			markdownString.isTrusted = true;
			return new vscode.Hover(markdownString);
        }
    });

	const sqlProvider = vscode.languages.registerHoverProvider({ scheme: 'file', language: 'sql' }, {
        provideHover() {
			const linkText = 'Generate Code using Enterprise AI Code Companion';
			const linkUrl = 'command:extension.codeSuggest';
			const markdownString = new vscode.MarkdownString(`[${linkText}](${linkUrl})`);
			markdownString.isTrusted = true;
			return new vscode.Hover(markdownString);
        }
    });


	context.subscriptions.push(pythonProvider);
	context.subscriptions.push(sqlProvider);
	context.subscriptions.push(vscode.commands.registerCommand('extension.codeSuggest', codeSuggest));
	context.subscriptions.push(disposable1);
	context.subscriptions.push(disposable2);
}

function deactivate() {}

module.exports = {
	activate,
	deactivate
}
